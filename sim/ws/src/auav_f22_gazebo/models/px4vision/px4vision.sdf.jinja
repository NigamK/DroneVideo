{# general geometry #}
{%- set arm_length = 0.14 -%}

{# fuselage #}
{%- set fuse_m = 1.5 -%}
{%- set fuse_ixx = 0.029125 -%}
{%- set fuse_iyy = 0.029125 -%}
{%- set fuse_izz = 0.055225 -%}

{# rotors #}
{%- set rtr_m = 0.005 -%}           {# mass, kg #}
{%- set rtr_r = 0.08  -%}           {# radius, m #}
{%- set rtr_h = 0.001 -%}           {# thickness, m #}
{%- set rtr_ixx = 0.000000975 -%}
{%- set rtr_iyy = 0.000273104 -%}
{%- set rtr_izz = 0.000274004 -%}
{%- set rtr_arm_data_list = [
  {'x': 0.091,  'y': -0.108,  'dir': 'ccw'},
  {'x': -0.097, 'y': 0.108, 'dir': 'ccw'},
  {'x': 0.091,  'y': 0.108, 'dir': 'cw'},
  {'x': -0.097, 'y': -0.108,  'dir': 'cw'},
  ]%}
{%- set with_optflow = False -%}

{%- macro cylinder(r, h) -%}
<geometry>
  <cylinder>
    <radius>{{r}}</radius>
    <length>{{h}}</length>
  </cylinder>
</geometry>
{%- endmacro -%}

{%- macro box(x, y, z) -%}
<geometry>
  <box>
    <size>{{x}} {{y}} {{z}}</size>
  </box>
</geometry>
{%- endmacro -%}

{%- macro inertial(m, ixx, iyy, izz) -%}
<inertial>
  <mass>{{m}}</mass>
  <inertia>
    <ixx>{{ixx}}</ixx> <iyy>{{iyy}}</iyy>
    <izz>{{izz}}</izz>
  </inertia>
</inertial>
{%- endmacro -%}

{%- macro px4vision(name, pose, mav_id, cam_angle) -%}
<model name="{{name}}">
  <pose>{{pose|join(' ') }}</pose>

  <link name="base_link">
    {{ inertial(fuse_m, fuse_ixx, fuse_iyy, fuse_izz)|indent(6) }}

    <visual name="fuselage_visual">
      <geometry>
        <mesh>
          <uri>model://px4vision/meshes/px4vision.stl</uri>
        </mesh>
      </geometry>
      <material>
        <diffuse>0 0 0 1</diffuse>
        <specular>0.5 0.5 0.5 1</specular>
      </material>
    </visual>

    <collision name="fuselage_collision">
      {{ box(0.2, 0.2, 0.13)|indent(8) }}
      <surface>
        <contact>
          <ode>
            <min_depth>1e-3</min_depth>
            <max_vel>0.1</max_vel>
            <kp>1e4</kp>
            <kd>1e1</kd>
          </ode>
        </contact>
        <friction>
          <ode/>
        </friction>
      </surface>
    </collision>

    <collision name="mast_collision">
      <pose>0.06 0 0.11 0 0 0</pose>
      {{ cylinder(0.03, 0.1) | indent(8) }}
    </collision>

    <sensor name="imu_sensor" type="imu">
        <always_on>1</always_on>
        <update_rate>250</update_rate>
        <visualize>true</visualize>
        <topic>imu</topic>
    </sensor>

    <sensor name="realsense_d435" type="rgbd_camera">
      <pose>0.09 0 -0.01 0 {{cam_angle}} 0</pose>
      <camera>
        <horizontal_fov>1.20428</horizontal_fov>
        <image>
          <format>R8G8B8</format>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>0.1</near>
          <far>100</far>
        </clip>
      </camera>
      <always_on>1</always_on>
      <update_rate>15</update_rate>
      <visualize>1</visualize>
      <topic>rgbd_camera</topic>
      <enable_metrics>true</enable_metrics>
    </sensor>

    <!--https://www.digikey.com/catalog/en/partgroup/psk-cm8jl65-cc5-tof-infrared-distance-measuring-sensor/90142-->
    <!--<sensor name="laser" type="ray">-->
      <!--<pose>0 0 0 0 1.57079633 0</pose>-->
      <!--<always_on>1</always_on>-->
      <!--<update_rate>20</update_rate>-->
      <!--<visualize>true</visualize>-->
      <!--<ray>-->
        <!--<scan>-->
          <!--<horizontal>-->
            <!--<samples>1</samples>-->
            <!--<resolution>1</resolution>-->
            <!--<min_angle>-0</min_angle>-->
            <!--<max_angle>0</max_angle>-->
          <!--</horizontal>-->
        <!--</scan>-->
        <!--<range>-->
          <!--<min>0.18</min>-->
          <!--<max>8.0</max>-->
          <!--<resolution>0.001</resolution>-->
        <!--</range>-->
        <!--<noise>-->
          <!--<type>gaussian</type>-->
          <!--<mean>0.0</mean>-->
          <!--<stddev>0.02</stddev>-->
        <!--</noise>-->
      <!--</ray>-->
      <!--<plugin name="laser_altimeter_plugin" filename="libgazebo_lidar_plugin.so">-->
        <!--<robotNamespace></robotNamespace>-->
        <!--<topic>/lidar</topic>-->
        <!--<min_distance>0.17</min_distance>-->
        <!--<max_distance>8.0</max_distance>-->
      <!--</plugin>-->
    <!--</sensor>-->

    <!--<sensor name="gps" type="gps">-->
      <!--<pose>0 0 0 0 0 0</pose>-->
      <!--<update_rate>5.0</update_rate>-->
      <!--<always_on>true</always_on>-->
      <!--<visualize>false</visualize>-->
      <!--<plugin name="gps_plugin" filename="libgazebo_gps_plugin.so">-->
        <!--<robotNamespace></robotNamespace>-->
        <!--<topic>/gps</topic>-->
        <!--<gpsNoise>true</gpsNoise>-->
        <!--<gpsXYRandomWalk>2.0</gpsXYRandomWalk>-->
        <!--<gpsZRandomWalk>4.0</gpsZRandomWalk>-->
        <!--<gpsXYNoiseDensity>2.0e-4</gpsXYNoiseDensity>-->
        <!--<gpsZNoiseDensity>4.0e-4</gpsZNoiseDensity>-->
        <!--<gpsVXYNoiseDensity>0.2</gpsVXYNoiseDensity>-->
        <!--<gpsVZNoiseDensity>0.4</gpsVZNoiseDensity>-->
      <!--</plugin>-->
    <!--</sensor>-->

    {%- if with_optflow -%}
    <!--752x480 MT9V034 image sensor, only 64x64 pixels used-->
    <!--<sensor name="PX4Flow" type="camera">-->
      <!--<pose>0 0 0 0 1.57 0</pose>-->
      <!--<always_on>true</always_on>-->
      <!--<update_rate>100.0</update_rate>-->
      <!--<visualize>false</visualize>-->
      <!--<topic>/px4flow</topic>-->
      <!--<camera>-->
        <!--<horizontal_fov>0.088</horizontal_fov>-->
        <!--<image>-->
          <!--<width>64</width>-->
          <!--<height>64</height>-->
          <!--<format>L8</format>-->
        <!--</image>-->
        <!--<clip>-->
          <!--<near>0.1</near>-->
          <!--<far>100</far>-->
        <!--</clip>-->
        <!--<noise>-->
          <!--<type>gaussian</type>-->
          <!--<mean>0.0</mean>-->
          <!--<stddev>0.001</stddev>-->
        <!--</noise>-->
      <!--</camera>-->
      <!--<plugin name="opticalflow_plugin" filename="libgazebo_opticalflow_plugin.so">-->
          <!--<robotNamespace></robotNamespace>-->
          <!--<outputRate>20</outputRate>-->
      <!--</plugin>-->
    <!--</sensor>-->
    {%- endif -%}

  </link>

  <!--<plugin name='p3d' filename='libgazebo_ros_p3d.so'>-->
    <!--<robotNamespace>{{name}}</robotNamespace>-->
    <!--<updateRate>10</updateRate>-->
    <!--<bodyName>base_link</bodyName>-->
    <!--<topicName>/qualisys/{{name}}/odom</topicName>-->
    <!--<frameName>map</frameName>-->
    <!--<xyzOffset>0 0 0</xyzOffset>-->
    <!--<rpyOffset>0 0 0</rpyOffset>-->
  <!--</plugin>-->

  <!--<plugin name='magnetometer_plugin' filename='libgazebo_magnetometer_plugin.so'>-->
    <!--<robotNamespace/>-->
    <!--<pubRate>100</pubRate>-->
    <!--<noiseDensity>0.0004</noiseDensity>-->
    <!--<randomWalk>6.4e-06</randomWalk>-->
    <!--<biasCorrelationTime>600</biasCorrelationTime>-->
    <!--<magTopic>/mag</magTopic>-->
  <!--</plugin>-->

  <!--<plugin-->
    <!--filename="libgazebo_barometer_plugin.so"-->
    <!--name="barometer_plugin::BarometerPlugin">-->
    <!--<linkName>base_link</linkName>-->
    <!--<robotNamespace/>-->
    <!--<pubRate>50</pubRate>-->
    <!--<baroTopic>/baro</baroTopic>-->
    <!--<baroDriftPaPerSec>0</baroDriftPaPerSec>-->
  <!--</plugin>-->

  <plugin
    filename="libgazebo_barometer_plugin.so"
    name="barometer_plugin::BarometerPlugin">
    <link_name>base_link</link_name>
  </plugin>
  <plugin
    filename="libgazebo_magnetometer_plugin.so"
    name="magnetometer_plugin::MagnetometerPlugin">
    <link_name>base_link</link_name>
  </plugin>
  <plugin
    filename="libgazebo_gps_plugin.so"
    name="gps_plugin::GpsPlugin">
    <link_name>base_link</link_name>
  </plugin>

  <plugin
    filename="libmavlink_sitl_ign_gazebo.so"
    name="mavlink_interface::GazeboMavlinkInterface">
    <robotNamespace/>
    <imuSubTopic>/imu</imuSubTopic>
    <magSubTopic>/mag</magSubTopic>
    <baroSubTopic>/baro</baroSubTopic>
    <opticalFlowSubTopic>/opticalFlow</opticalFlowSubTopic>
    <mavlink_addr>INADDR_ANY</mavlink_addr>
    <mavlink_tcp_port>{{ mavlink_tcp_port + mav_id }}</mavlink_tcp_port>
    <mavlink_udp_port>{{ mavlink_udp_port + mav_id }}</mavlink_udp_port>
    <serialEnabled>{{ serial_enabled }}</serialEnabled>
    <serialDevice>{{ serial_device }}</serialDevice>
    <baudRate>{{ serial_baudrate }}</baudRate>
    <qgc_addr>INADDR_ANY</qgc_addr>
    <qgc_udp_port>14550</qgc_udp_port>
    <sdk_addr>INADDR_ANY</sdk_addr>
    <sdk_udp_port>14540</sdk_udp_port>
    <hil_mode>{{ hil_mode }}</hil_mode>
    <hil_state_level>0</hil_state_level>
    <send_vision_estimation>0</send_vision_estimation>
    <send_odometry>0</send_odometry>
    <enable_lockstep>1</enable_lockstep>
    <use_tcp>1</use_tcp>
    <motorSpeedCommandPubTopic>/command/motor_speed</motorSpeedCommandPubTopic>
    <control_channels>
      {%- for n in range(4) -%}
      <channel name='rotor{{ n + 1 }}'>
        <input_index>{{ n }}</input_index>
        <input_offset>0</input_offset>
        <input_scaling>1000</input_scaling>
        <zero_position_disarmed>0</zero_position_disarmed>
        <zero_position_armed>100</zero_position_armed>
        <joint_control_type>velocity</joint_control_type>
      </channel>
      {% endfor %}
    </control_channels>
  </plugin>

  {%- for n in range(4) -%}

    {%- set x = rtr_arm_data_list[n]['x'] %}
    {%- set y = rtr_arm_data_list[n]['y'] %}
    {%- set dir = rtr_arm_data_list[n]['dir'] %}
    {%- set rtr_pos = [x, y, 0.032] %}

    {%- if dir == 'ccw' %}
      {%- set rtr_dir = "ccw" %}
    {%- elif dir== 'cw' %}
      {%- set rtr_dir = "cw" %}
    {%- endif %}

    {%- set prop_uri = "model://px4vision/meshes/prop_{:s}.stl".format(rtr_dir) %}

  <!--Rotor {{n}} -->
  <link name="rotor_{{n}}">

    <pose>{{ rtr_pos|join(' ') }} 0 0 0</pose>
    {{ inertial(rtr_m, rtr_ixx, rtr_iyy, rtr_izz)| indent(8) }}
    <visual name="rotor_{{n}}_visual">
      <geometry>
        <mesh>
          <uri>{{prop_uri}}</uri>
        </mesh>
      </geometry>
      <material>
        <diffuse>0 0 0 1</diffuse>
        <specular>0.2 0.2 0.2 1</specular>
      </material>
    </visual>

    <collision name="rotor_{{n}}_collision">
      {{ cylinder(rtr_r, rtr_h) | indent(8) }}
    </collision>

  </link>

  <joint name="rotor_{{n}}_joint" type="revolute">
    <parent>base_link</parent>
    <child>rotor_{{n}}</child>
    <axis>
      <xyz>0 0 1</xyz>
      <limit>
        <lower>-1e+16</lower>
        <upper>1e+16</upper>
      </limit>
      <use_parent_model_frame>1</use_parent_model_frame>
    </axis>
  </joint>

  <plugin 
    filename="ignition-gazebo-multicopter-motor-model-system"
    name="ignition::gazebo::systems::MulticopterMotorModel">
    <robotNamespace/>
    <jointName>rotor_{{n}}_joint</jointName>
    <linkName>rotor_{{n}}</linkName>
    <turningDirection>{{rtr_dir}}</turningDirection>
    <timeConstantUp>0.0125</timeConstantUp>
    <timeConstantDown>0.025</timeConstantDown>
    <maxRotVelocity>1100</maxRotVelocity>
    <motorConstant>5.84e-06</motorConstant>
    <momentConstant>0.06</momentConstant>
    <commandSubTopic>/command/motor_speed</commandSubTopic>
    <motorNumber>{{n}}</motorNumber>
    <rotorDragCoefficient>0.000175</rotorDragCoefficient>
    <rollingMomentCoefficient>1e-06</rollingMomentCoefficient>
    <motorSpeedPubTopic>/motor_speed/{{n}}</motorSpeedPubTopic>
    <rotorVelocitySlowdownSim>10</rotorVelocitySlowdownSim>
  </plugin>
  {% endfor %}

</model>
{%- endmacro -%}

<?xml version="1.0" ?>
<!-- DO NOT EDIT: Generated from px4vision.sdf.jinja -->
<sdf version="1.7">
{{ px4vision(name="px4vision", pose=[0, 0, 0, 0, 0, 0], mav_id=0, cam_angle=0) }}
</sdf>
<!-- vim: set et ft=xml fenc=utf-8 ff=unix sts=0 sw=2 ts=2 : -->
